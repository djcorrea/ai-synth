// üéõÔ∏è VALIDADOR FUNK MANDELA - Estrutura Fixed/Flex
// Valida implementa√ß√£o de padr√µes fixos vs flex√≠veis conforme especifica√ß√£o

console.log('üîÑ VALIDANDO ESTRUTURA FIXED/FLEX DO FUNK MANDELA...');

// Fun√ß√£o para validar estrutura fixed/flex
function validateFixedFlexStructure(data) {
    const validation = {
        success: true,
        errors: [],
        warnings: [],
        fixedFields: [],
        flexFields: []
    };

    const funk = data?.funk_mandela;
    if (!funk) {
        validation.errors.push('Dados do funk_mandela n√£o encontrados');
        validation.success = false;
        return validation;
    }

    // Validar se√ß√£o FIXED (hard constraints)
    console.log('üî• Validando se√ß√£o FIXED (hard constraints)...');
    if (funk.fixed) {
        // LUFS
        if (funk.fixed.lufs?.integrated) {
            const lufs = funk.fixed.lufs.integrated;
            if (lufs.target === -8.0 && lufs.tolerance === 1.0) {
                validation.fixedFields.push('‚úÖ LUFS: -8.0 ¬±1.0');
            } else {
                validation.errors.push(`‚ùå LUFS inv√°lido: ${lufs.target} ¬±${lufs.tolerance} (esperado: -8.0 ¬±1.0)`);
            }
        } else {
            validation.errors.push('‚ùå Campo LUFS.integrated ausente em fixed');
        }

        // True Peak
        if (funk.fixed.truePeak) {
            const tp = funk.fixed.truePeak;
            if (tp.streamingMax === -0.3 && tp.baileMax === 0.0) {
                validation.fixedFields.push('‚úÖ True Peak: streaming -0.3, baile 0.0');
            } else {
                validation.errors.push(`‚ùå True Peak inv√°lido: streaming ${tp.streamingMax}, baile ${tp.baileMax}`);
            }
        } else {
            validation.errors.push('‚ùå Campo truePeak ausente em fixed');
        }

        // Dynamic Range
        if (funk.fixed.dynamicRange?.dr) {
            const dr = funk.fixed.dynamicRange.dr;
            if (dr.target === 8.0 && dr.tolerance === 1.0) {
                validation.fixedFields.push('‚úÖ DR: 8.0 ¬±1.0');
            } else {
                validation.errors.push(`‚ùå DR inv√°lido: ${dr.target} ¬±${dr.tolerance} (esperado: 8.0 ¬±1.0)`);
            }
        } else {
            validation.errors.push('‚ùå Campo dynamicRange.dr ausente em fixed');
        }

        // Low End Mono
        if (funk.fixed.lowEnd?.mono?.cutoffHz === 100) {
            validation.fixedFields.push('‚úÖ Low End Mono: 100Hz cutoff');
        } else {
            validation.errors.push('‚ùå Campo lowEnd.mono.cutoffHz inv√°lido ou ausente');
        }

        // Vocal Presence
        if (funk.fixed.vocalPresence) {
            const vp = funk.fixed.vocalPresence;
            if (Array.isArray(vp.bandHz) && vp.bandHz[0] === 1000 && vp.bandHz[1] === 4000) {
                validation.fixedFields.push('‚úÖ Vocal Presence: 1000-4000Hz');
            } else {
                validation.errors.push('‚ùå Campo vocalPresence.bandHz inv√°lido');
            }
        } else {
            validation.errors.push('‚ùå Campo vocalPresence ausente em fixed');
        }

        // RMS Policy
        if (funk.fixed.rms?.policy === 'deriveFromLUFS') {
            validation.fixedFields.push('‚úÖ RMS: derivado de LUFS');
        } else {
            validation.warnings.push('‚ö†Ô∏è RMS policy n√£o definida ou inv√°lida');
        }
    } else {
        validation.errors.push('‚ùå Se√ß√£o "fixed" ausente');
        validation.success = false;
    }

    // Validar se√ß√£o FLEX (soft constraints)
    console.log('üé® Validando se√ß√£o FLEX (soft constraints)...');
    if (funk.flex) {
        // Clipping
        if (funk.flex.clipping?.samplePctMax === 0.02) {
            validation.flexFields.push('‚úÖ Clipping: max 2%');
        } else {
            validation.warnings.push('‚ö†Ô∏è Clipping limit inv√°lido ou ausente');
        }

        // LRA
        if (funk.flex.lra?.min === 1.0 && funk.flex.lra?.max === 4.0) {
            validation.flexFields.push('‚úÖ LRA: 1.0-4.0 range');
        } else {
            validation.warnings.push('‚ö†Ô∏è LRA range inv√°lido ou ausente');
        }

        // Stereo Width
        if (funk.flex.stereo?.width?.midsHighsTolerance === 'wide') {
            validation.flexFields.push('‚úÖ Stereo: wide tolerance em m√©dios/agudos');
        } else {
            validation.warnings.push('‚ö†Ô∏è Stereo width tolerance n√£o definida');
        }

        // Tonal Curve
        if (funk.flex.tonalCurve?.bands && Array.isArray(funk.flex.tonalCurve.bands)) {
            const bands = funk.flex.tonalCurve.bands;
            const expectedBands = ['sub', 'low_bass', 'upper_bass', 'low_mid', 'mid', 'high_mid', 'brilho', 'presenca'];
            const foundBands = bands.map(b => b.name);
            const missingBands = expectedBands.filter(eb => !foundBands.includes(eb));
            
            if (missingBands.length === 0) {
                validation.flexFields.push(`‚úÖ Tonal Curve: ${bands.length} bandas definidas`);
            } else {
                validation.warnings.push(`‚ö†Ô∏è Bandas faltantes: ${missingBands.join(', ')}`);
            }
        } else {
            validation.warnings.push('‚ö†Ô∏è Tonal curve bands n√£o definidas');
        }
    } else {
        validation.errors.push('‚ùå Se√ß√£o "flex" ausente');
        validation.success = false;
    }

    // Validar compatibilidade legada
    console.log('üîó Validando compatibilidade legada...');
    if (funk.legacy_compatibility) {
        if (funk.legacy_compatibility.lufs_target === -8) {
            validation.fixedFields.push('‚úÖ Legacy compatibility: LUFS target');
        }
        if (funk.legacy_compatibility.pattern_rules) {
            validation.flexFields.push('‚úÖ Legacy compatibility: pattern rules');
        }
    } else {
        validation.warnings.push('‚ö†Ô∏è Se√ß√£o legacy_compatibility ausente');
    }

    return validation;
}

// Fun√ß√£o para testar classifica√ß√£o hard vs soft
function testConstraintClassification(data) {
    console.log('üß™ Testando classifica√ß√£o de constraints...');
    
    const testCases = [
        {
            name: 'Hard OK, Soft Problemas',
            metrics: {
                lufsIntegrated: -8.0,        // ‚úÖ Fixed: perfeito
                truePeakDbtp: -0.3,          // ‚úÖ Fixed: perfeito
                dynamicRange: 8.0,           // ‚úÖ Fixed: perfeito
                clippingPct: 0.03,           // ‚ùå Flex: 3% > 2%
                lra: 5.0,                    // ‚ùå Flex: fora 1-4
                stereoCorrelation: 0.4       // ‚ùå Flex: muito amplo
            },
            expectedResult: 'Score alto (>85%) pois fixed constraints OK'
        },
        {
            name: 'Hard Falhando, Soft OK',
            metrics: {
                lufsIntegrated: -6.0,        // ‚ùå Fixed: muito alto
                truePeakDbtp: -0.3,          // ‚úÖ Fixed: OK
                dynamicRange: 6.0,           // ‚ùå Fixed: muito baixo
                clippingPct: 0.01,           // ‚úÖ Flex: perfeito
                lra: 2.5,                    // ‚úÖ Flex: perfeito
                stereoCorrelation: 0.22      // ‚úÖ Flex: perfeito
            },
            expectedResult: 'Score baixo (<70%) pois fixed constraints falham'
        },
        {
            name: 'Contexto Streaming',
            metrics: {
                lufsIntegrated: -8.0,
                truePeakDbtp: -0.2,          // ‚ùå Para streaming (-0.3 required)
                context: 'streaming'
            },
            expectedResult: 'Falha em streaming context'
        },
        {
            name: 'Contexto Baile',
            metrics: {
                lufsIntegrated: -8.0,
                truePeakDbtp: -0.1,          // ‚úÖ Para baile (0.0 max)
                context: 'baile'
            },
            expectedResult: 'OK em baile context'
        }
    ];

    const results = [];
    for (const testCase of testCases) {
        console.log(`üìä Testando: ${testCase.name}`);
        
        // Simular classifica√ß√£o
        let hardConstraintsPassed = 0;
        let hardConstraintsTotal = 3; // LUFS, TruePeak, DR
        
        // LUFS check
        if (Math.abs(testCase.metrics.lufsIntegrated - (-8)) <= 1) {
            hardConstraintsPassed++;
        }
        
        // True Peak check (contextual)
        const tpLimit = testCase.metrics.context === 'streaming' ? -0.3 : 0.0;
        if (testCase.metrics.truePeakDbtp <= tpLimit) {
            hardConstraintsPassed++;
        }
        
        // DR check
        if (testCase.metrics.dynamicRange && Math.abs(testCase.metrics.dynamicRange - 8) <= 1) {
            hardConstraintsPassed++;
        }
        
        const hardScore = (hardConstraintsPassed / hardConstraintsTotal) * 100;
        const result = {
            testCase: testCase.name,
            hardScore: Math.round(hardScore),
            hardPassed: hardConstraintsPassed,
            hardTotal: hardConstraintsTotal,
            expected: testCase.expectedResult
        };
        
        results.push(result);
        console.log(`  ‚Üí Hard score: ${result.hardScore}% (${result.hardPassed}/${result.hardTotal})`);
    }
    
    return results;
}

// Fun√ß√£o para gerar relat√≥rio final
function generateValidationReport(validation, testResults) {
    console.log('\nüìã RELAT√ìRIO FINAL DE VALIDA√á√ÉO\n');
    
    console.log('üî• FIXED CONSTRAINTS (Hard):');
    validation.fixedFields.forEach(field => console.log(`  ${field}`));
    
    console.log('\nüé® FLEX CONSTRAINTS (Soft):');
    validation.flexFields.forEach(field => console.log(`  ${field}`));
    
    if (validation.errors.length > 0) {
        console.log('\n‚ùå ERROS:');
        validation.errors.forEach(error => console.log(`  ${error}`));
    }
    
    if (validation.warnings.length > 0) {
        console.log('\n‚ö†Ô∏è WARNINGS:');
        validation.warnings.forEach(warning => console.log(`  ${warning}`));
    }
    
    console.log('\nüß™ RESULTADOS DOS TESTES:');
    testResults.forEach(result => {
        console.log(`  ${result.testCase}: ${result.hardScore}% - ${result.expected}`);
    });
    
    const overallSuccess = validation.success && validation.errors.length === 0;
    console.log(`\nüéØ STATUS GERAL: ${overallSuccess ? '‚úÖ SUCESSO' : '‚ùå FALHA'}`);
    
    return {
        success: overallSuccess,
        fixedCount: validation.fixedFields.length,
        flexCount: validation.flexFields.length,
        errorCount: validation.errors.length,
        warningCount: validation.warnings.length,
        testResults
    };
}

// Executar valida√ß√£o
async function runValidation() {
    try {
        // Carregar dados do arquivo JSON
        const response = await fetch('/refs/out/funk_mandela.json?v=' + Date.now(), {
            cache: 'no-store'
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }
        
        const data = await response.json();
        console.log('üìÇ Dados carregados:', data.funk_mandela?.version);
        
        // Executar valida√ß√µes
        const validation = validateFixedFlexStructure(data);
        const testResults = testConstraintClassification(data);
        const report = generateValidationReport(validation, testResults);
        
        // Salvar no window para debug
        if (typeof window !== 'undefined') {
            window.__FUNK_MANDELA_VALIDATION__ = {
                validation,
                testResults,
                report,
                timestamp: new Date().toISOString()
            };
        }
        
        return report;
        
    } catch (error) {
        console.error('‚ùå ERRO NA VALIDA√á√ÉO:', error);
        return { success: false, error: error.message };
    }
}

// Auto-executar se em browser
if (typeof window !== 'undefined') {
    window.addEventListener('load', () => {
        runValidation().then(report => {
            console.log('üéâ Valida√ß√£o conclu√≠da:', report.success ? 'SUCESSO' : 'FALHA');
        });
    });
}

// Exports para Node.js
if (typeof module !== 'undefined') {
    module.exports = {
        validateFixedFlexStructure,
        testConstraintClassification,
        generateValidationReport,
        runValidation
    };
}
