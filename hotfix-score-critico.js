// üö® HOTFIX CR√çTICO - SCORE COMPUTEMIXSCORE
console.log('üö® APLICANDO HOTFIX CR√çTICO');

// 1. For√ßa todas as flags
window.SCORING_V2 = true;
window.USE_TT_DR = true; 
window.USE_EQUAL_WEIGHT_V3 = true;
window.AUDIT_MODE = true;
window.FORCE_SCORING_V2 = true;
window.COLOR_RATIO_V2 = false;

// 2. Intercepta o audio-analyzer.js e for√ßa score v√°lido
(function() {
  console.log('üîß Interceptando sistema de scoring...');
  
  // Hook no momento da chamada do scoring
  const originalLog = console.log;
  console.log = function(...args) {
    // Detecta quando o scoring.js √© carregado
    if (args[0] && args[0].includes && args[0].includes('[SCORE_DEBUG] ‚úÖ scoring.js v√°lido, executando...')) {
      console.log('üéØ INTERCEPTANDO MOMENTO DO SCORING');
      
      // For√ßa carregamento do scoring.js atualizado
      setTimeout(() => {
        fetch('/lib/audio/features/scoring.js?v=' + Date.now())
          .then(r => r.text())
          .then(code => {
            console.log('‚úÖ scoring.js recarregado no momento certo');
            eval(code);
            
            // Sobrescreve a fun√ß√£o global
            window.computeMixScore = computeMixScore;
            window._computeEqualWeightV3 = _computeEqualWeightV3;
            
            console.log('‚úÖ Fun√ß√µes atualizadas globalmente');
          });
      }, 100);
    }
    
    // Intercepta o fallback
    if (args[0] && args[0].includes && args[0].includes('[SCORE_DEBUG] ‚ö†Ô∏è qualityOverall inv√°lido')) {
      console.error('üö® FALLBACK DETECTADO - TENTANDO CORRE√á√ÉO IMEDIATA');
      
      // Tenta executar scoring manualmente
      setTimeout(() => {
        if (window.computeMixScore && window.__LAST_TECHNICAL_DATA) {
          console.log('üîß Tentando re-executar scoring com dados salvos...');
          
          try {
            const result = window.computeMixScore(window.__LAST_TECHNICAL_DATA, window.__LAST_REFERENCE);
            console.log('‚úÖ Re-execu√ß√£o resultado:', result);
            
            if (result && Number.isFinite(result.scorePct)) {
              console.log('üéØ SCORE CORRIGIDO:', result.scorePct);
              
              // For√ßa atualiza√ß√£o na interface
              const scoreElements = document.querySelectorAll('[data-score], .score, .quality-score');
              scoreElements.forEach(el => {
                if (el.textContent.includes('36.55') || el.textContent.includes('36,55')) {
                  el.textContent = el.textContent.replace(/36[.,]55/, result.scorePct.toFixed(1));
                  el.style.color = '#00ff00';
                  el.style.fontWeight = 'bold';
                }
              });
            }
          } catch (err) {
            console.error('‚ùå Erro na re-execu√ß√£o:', err);
          }
        }
      }, 500);
    }
    
    originalLog.apply(console, args);
  };
  
  // Salva dados t√©cnicos para re-execu√ß√£o
  const originalComputeMixScore = window.computeMixScore;
  if (originalComputeMixScore) {
    window.computeMixScore = function(technicalData, reference) {
      window.__LAST_TECHNICAL_DATA = technicalData;
      window.__LAST_REFERENCE = reference;
      
      const result = originalComputeMixScore.call(this, technicalData, reference);
      console.log('üìä computeMixScore chamado:', { input: technicalData, output: result });
      
      return result;
    };
  }
  
  console.log('‚úÖ Hotfix aplicado - pr√≥xima an√°lise deve funcionar');
})();

console.log('üöÄ HOTFIX ATIVO - Fa√ßa uma an√°lise de √°udio agora!');
