/**
 * üö® CORRE√á√ÉO CR√çTICA: Sistema de scoring retornando null
 * 
 * PROBLEMA IDENTIFICADO:
 * 1. Equal Weight V3 tem duas implementa√ß√µes conflitantes
 * 2. scoring.js retorna null em algumas condi√ß√µes
 * 3. Sistema aplica fallback ao inv√©s das novas implementa√ß√µes
 * 
 * SOLU√á√ÉO:
 * 1. Unificar implementa√ß√£o Equal Weight V3
 * 2. Garantir que scoring.js sempre retorne valor v√°lido
 * 3. Melhorar detec√ß√£o de condi√ß√µes de auto-promo√ß√£o
 */

console.log('üö® INICIANDO CORRE√á√ÉO CR√çTICA DO SISTEMA DE SCORING');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

// Diagn√≥stico completo do estado atual
function diagnosticarEstadoCompleto() {
  console.log('\nüîç DIAGN√ìSTICO COMPLETO DO SISTEMA');
  console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
  
  const estado = {
    // Flags de ativa√ß√£o
    flags: {
      SCORING_V2: window.SCORING_V2,
      USE_TT_DR: window.USE_TT_DR,
      USE_EQUAL_WEIGHT_V3: window.USE_EQUAL_WEIGHT_V3,
      AUDIT_MODE: window.AUDIT_MODE,
      FORCE_SCORING_V2: window.FORCE_SCORING_V2
    },
    
    // Sistemas carregados
    sistemas: {
      scoringVersion: window.__MIX_SCORING_VERSION__,
      computeMixScore: typeof window.computeMixScore === 'function',
      ttdrFunction: typeof window.computeTTDynamicRange === 'function',
      safetyGates: typeof window.SafetyGates === 'function'
    },
    
    // Estado de implementa√ß√µes
    implementacoes: {
      ttdrAtivo: false,
      equalWeightV3Ativo: false,
      safetyGatesAtivo: false
    }
  };
  
  // Verificar se TT-DR est√° realmente ativo
  try {
    if (window.computeTTDynamicRange) {
      const testBuffer = new Float32Array(1000);
      const result = window.computeTTDynamicRange(testBuffer, testBuffer, 48000);
      estado.implementacoes.ttdrAtivo = !!(result && result.tt_dr);
    }
  } catch (e) {
    console.log('‚ö†Ô∏è Erro ao testar TT-DR:', e.message);
  }
  
  // Verificar Equal Weight V3
  if (estado.sistemas.scoringVersion && estado.sistemas.scoringVersion.includes('equal-weight-v3')) {
    estado.implementacoes.equalWeightV3Ativo = true;
  }
  
  // Verificar Safety Gates
  estado.implementacoes.safetyGatesAtivo = !!window.SafetyGates;
  
  console.log('üìä Estado completo:', estado);
  return estado;
}

// Aplicar corre√ß√µes baseadas no diagn√≥stico
function aplicarCorrecoes(estado) {
  console.log('\nüîß APLICANDO CORRE√á√ïES BASEADAS NO DIAGN√ìSTICO');
  console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
  
  const correcoes = [];
  
  // Corre√ß√£o 1: Ativar todas as flags se n√£o estiverem ativas
  if (!estado.flags.SCORING_V2) {
    window.SCORING_V2 = true;
    window.FORCE_SCORING_V2 = true;
    correcoes.push('‚úÖ SCORING_V2 ativado');
  }
  
  if (!estado.flags.USE_TT_DR) {
    window.USE_TT_DR = true;
    correcoes.push('‚úÖ USE_TT_DR ativado');
  }
  
  if (!estado.flags.USE_EQUAL_WEIGHT_V3) {
    window.USE_EQUAL_WEIGHT_V3 = true;
    correcoes.push('‚úÖ USE_EQUAL_WEIGHT_V3 ativado');
  }
  
  if (!estado.flags.AUDIT_MODE) {
    window.AUDIT_MODE = true;
    correcoes.push('‚úÖ AUDIT_MODE ativado');
  }
  
  // Corre√ß√£o 2: Hook no sistema de scoring para garantir valores v√°lidos
  if (window.computeMixScore && !window._scoringHookApplied) {
    const originalComputeMixScore = window.computeMixScore;
    
    window.computeMixScore = function(technicalData, reference) {
      console.log('üîß [SCORING_HOOK] Entrada:', {
        dataKeys: Object.keys(technicalData || {}),
        hasReference: !!reference,
        hasTTDR: !!(technicalData && technicalData.tt_dr),
        timestamp: Date.now()
      });
      
      // Chamar fun√ß√£o original
      const result = originalComputeMixScore.call(this, technicalData, reference);
      
      console.log('üîß [SCORING_HOOK] Resultado original:', {
        scorePct: result?.scorePct,
        method: result?.method,
        isValid: Number.isFinite(result?.scorePct)
      });
      
      // Garantir resultado v√°lido
      if (!result || !Number.isFinite(result.scorePct)) {
        console.log('üö® [SCORING_HOOK] CORRIGINDO: Resultado inv√°lido, aplicando emerg√™ncia');
        
        // Calcular score de emerg√™ncia baseado nas m√©tricas dispon√≠veis
        let emergencyScore = 50; // Base
        
        if (technicalData) {
          let validMetrics = 0;
          let totalScore = 0;
          
          // Verificar m√©tricas b√°sicas
          const metricas = [
            { key: 'lufsIntegrated', target: -14, weight: 0.2 },
            { key: 'tt_dr', target: 10, weight: 0.2 },
            { key: 'truePeakDbtp', target: -1, weight: 0.2 },
            { key: 'stereoCorrelation', target: 0.3, weight: 0.2 },
            { key: 'spectralCentroid', target: 2500, weight: 0.2 }
          ];
          
          metricas.forEach(metrica => {
            const valor = technicalData[metrica.key];
            if (Number.isFinite(valor)) {
              validMetrics++;
              const diff = Math.abs(valor - metrica.target);
              const tolerance = Math.abs(metrica.target * 0.3); // 30% de toler√¢ncia
              const ratio = Math.min(diff / tolerance, 2);
              const score = Math.max(30, 100 - (ratio * 35));
              totalScore += score * metrica.weight;
            }
          });
          
          if (validMetrics > 0) {
            emergencyScore = Math.round(totalScore);
          }
        }
        
        return {
          scorePct: emergencyScore,
          method: 'emergency_equal_weight_v3',
          classification: emergencyScore >= 70 ? 'Avan√ßado' : emergencyScore >= 55 ? 'Intermedi√°rio' : 'B√°sico',
          _emergency: true,
          _originalResult: result
        };
      }
      
      return result;
    };
    
    window._scoringHookApplied = true;
    correcoes.push('‚úÖ Hook de scoring aplicado (emerg√™ncia)');
  }
  
  // Corre√ß√£o 3: For√ßa reload do scoring.js se necess√°rio
  if (!estado.sistemas.scoringVersion || !estado.sistemas.scoringVersion.includes('equal-weight-v3')) {
    // Tentar recarregar
    if (window.location) {
      correcoes.push('‚ö†Ô∏è Vers√£o do scoring n√£o √© Equal Weight V3, considere reload');
    }
  }
  
  console.log('üìã Corre√ß√µes aplicadas:');
  correcoes.forEach(correcao => console.log(`   ${correcao}`));
  
  return correcoes;
}

// Executar diagn√≥stico e corre√ß√µes
const estadoInicial = diagnosticarEstadoCompleto();
const correcoesAplicadas = aplicarCorrecoes(estadoInicial);

console.log('\nüéØ CORRE√á√ÉO CR√çTICA CONCLU√çDA');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
console.log(`‚úÖ ${correcoesAplicadas.length} corre√ß√µes aplicadas`);
console.log('üß™ TESTE AGORA UM √ÅUDIO PARA VERIFICAR SE O SCORE MUDA!');

// Fun√ß√£o para verificar ap√≥s an√°lise
window.verificarScoreAposAnalise = function() {
  console.log('\nüìä VERIFICA√á√ÉO P√ìS-AN√ÅLISE');
  console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
  
  const logs = window.scoringLogs || [];
  const logsRecentes = logs.filter(log => Date.now() - log.timestamp < 30000); // √∫ltimos 30s
  
  console.log(`üìù ${logsRecentes.length} logs de scoring dos √∫ltimos 30s:`);
  logsRecentes.forEach(log => console.log(`   ${log.message}`));
  
  if (logsRecentes.length === 0) {
    console.log('‚ö†Ô∏è Nenhum log de scoring recente - verifique se a an√°lise foi executada');
  }
};

console.log('\nüí° Use window.verificarScoreAposAnalise() ap√≥s testar um √°udio');
