/**
 * üéØ VALIDADOR AUTOM√ÅTICO DO SISTEMA UNIFICADO
 * 
 * Executa automaticamente valida√ß√µes completas ao carregar
 * Garante que o sistema est√° funcionando perfeitamente
 */

(function() {
    'use strict';
    
    // Aguardar carregamento completo
    function waitForUnifiedSystem() {
        return new Promise((resolve, reject) => {
            let attempts = 0;
            const maxAttempts = 50; // 5 segundos m√°ximo
            
            const checkSystem = () => {
                attempts++;
                
                if (window.calcularStatusSugestaoUnificado && 
                    window.STATUS_SUGGESTION_UNIFIED_V1 && 
                    window.applyUnifiedSystemPatches) {
                    resolve();
                } else if (attempts >= maxAttempts) {
                    reject(new Error('Sistema unificado n√£o carregou em tempo h√°bil'));
                } else {
                    setTimeout(checkSystem, 100);
                }
            };
            
            checkSystem();
        });
    }
    
    // Valida√ß√£o autom√°tica completa
    async function executeFullValidation() {
        try {
            console.log('üéØ [AUTO-VALIDATOR] Iniciando valida√ß√£o completa...');
            
            // Aguardar sistema carregar
            await waitForUnifiedSystem();
            console.log('‚úÖ [AUTO-VALIDATOR] Sistema unificado carregado');
            
            // Teste 1: Feature flag ativa
            if (!window.STATUS_SUGGESTION_UNIFIED_V1) {
                throw new Error('Feature flag n√£o est√° ativa');
            }
            console.log('‚úÖ [AUTO-VALIDATOR] Feature flag ativa');
            
            // Teste 2: Fun√ß√£o principal dispon√≠vel
            if (typeof window.calcularStatusSugestaoUnificado !== 'function') {
                throw new Error('Fun√ß√£o principal n√£o dispon√≠vel');
            }
            console.log('‚úÖ [AUTO-VALIDATOR] Fun√ß√£o principal dispon√≠vel');
            
            // Teste 3: Testes unit√°rios autom√°ticos
            const testResult = window.executarTestesUnificados();
            if (testResult.falhou > 0) {
                throw new Error(`${testResult.falhou} testes unit√°rios falharam`);
            }
            console.log(`‚úÖ [AUTO-VALIDATOR] Testes unit√°rios: ${testResult.passou}/${testResult.total} passaram`);
            
            // Teste 4: Migra√ß√£o aplicada
            if (!window.createEnhancedDiffCellOriginal) {
                console.log('‚ö†Ô∏è [AUTO-VALIDATOR] Migra√ß√£o n√£o detectada (normal se n√£o havia fun√ß√£o legacy)');
            } else {
                console.log('‚úÖ [AUTO-VALIDATOR] Migra√ß√£o aplicada');
            }
            
            // Teste 5: Valida√ß√£o funcional espec√≠fica
            const testCases = [
                { valor: -14.0, alvo: -14, tolerancia: 1, esperado: 'ideal' },
                { valor: -15.5, alvo: -14, tolerancia: 1, esperado: 'ajustar' },
                { valor: -17.0, alvo: -14, tolerancia: 1, esperado: 'corrigir' }
            ];
            
            for (const test of testCases) {
                const resultado = window.calcularStatusSugestaoUnificado(
                    test.valor, test.alvo, test.tolerancia, 'LUFS', 'Teste'
                );
                
                if (resultado.status !== test.esperado) {
                    throw new Error(`Teste funcional falhou: ${test.valor} ‚Üí ${resultado.status}, esperado: ${test.esperado}`);
                }
                
                // Validar que ideal n√£o gera sugest√£o
                if (test.esperado === 'ideal' && resultado.sugestao !== null) {
                    throw new Error('BUG: Status ideal gerou sugest√£o!');
                }
                
                // Validar que n√£o-ideal gera sugest√£o
                if (test.esperado !== 'ideal' && resultado.sugestao === null) {
                    throw new Error('BUG: Status n√£o-ideal n√£o gerou sugest√£o!');
                }
            }
            console.log('‚úÖ [AUTO-VALIDATOR] Valida√ß√£o funcional completa');
            
            // Teste 6: Performance b√°sica
            const startTime = performance.now();
            for (let i = 0; i < 1000; i++) {
                window.calcularStatusSugestaoUnificado(-14 + Math.random() * 10, -14, 1);
            }
            const endTime = performance.now();
            const avgTime = (endTime - startTime) / 1000;
            
            if (avgTime > 1) { // Mais de 1ms por chamada √© suspeito
                console.warn(`‚ö†Ô∏è [AUTO-VALIDATOR] Performance suspeita: ${avgTime.toFixed(3)}ms/chamada`);
            } else {
                console.log(`‚úÖ [AUTO-VALIDATOR] Performance OK: ${avgTime.toFixed(3)}ms/chamada`);
            }
            
            // Sucesso total
            console.log('üéâ [AUTO-VALIDATOR] SISTEMA UNIFICADO FUNCIONANDO PERFEITAMENTE!');
            
            // Disponibilizar status global
            window.UNIFIED_SYSTEM_STATUS = {
                active: true,
                validated: true,
                timestamp: new Date().toISOString(),
                version: 'V1',
                performance: `${avgTime.toFixed(3)}ms/call`
            };
            
            // Evento customizado para integra√ß√£o
            window.dispatchEvent(new CustomEvent('unifiedSystemReady', {
                detail: window.UNIFIED_SYSTEM_STATUS
            }));
            
        } catch (error) {
            console.error('‚ùå [AUTO-VALIDATOR] FALHA NA VALIDA√á√ÉO:', error);
            
            // Status de erro
            window.UNIFIED_SYSTEM_STATUS = {
                active: false,
                validated: false,
                error: error.message,
                timestamp: new Date().toISOString()
            };
            
            // Tentar fallback para sistema legacy
            if (window.createEnhancedDiffCellOriginal) {
                window.createEnhancedDiffCell = window.createEnhancedDiffCellOriginal;
                console.log('üîÑ [AUTO-VALIDATOR] Fallback para sistema legacy aplicado');
            }
            
            throw error;
        }
    }
    
    // Executar valida√ß√£o quando DOM estiver pronto
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', executeFullValidation);
    } else {
        // DOM j√° carregado, executar imediatamente
        setTimeout(executeFullValidation, 500);
    }
    
    // Expor fun√ß√£o para execu√ß√£o manual
    window.validateUnifiedSystem = executeFullValidation;
    
})();
