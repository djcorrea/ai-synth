// Script para verificar se os novos targets est√£o funcionando ap√≥s o deploy

console.log('üîç VERIFICA√á√ÉO FINAL - NOVOS TARGETS FUNK MANDELA');
console.log('='.repeat(60));

async function verificarTargetsProducao() {
    const timestamp = Date.now();
    
    // URLs para testar
    const urls = [
        `https://ai-synth.vercel.app/public/refs/out/funk_mandela.json?v=${timestamp}`,
        `https://ai-synth.vercel.app/refs/out/funk_mandela.json?v=${timestamp}`
    ];
    
    console.log('üåê Testando URLs em produ√ß√£o...');
    
    for (const url of urls) {
        try {
            console.log(`\nüì° Testando: ${url}`);
            
            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'Cache-Control': 'no-cache',
                    'Pragma': 'no-cache'
                }
            });
            
            console.log(`   Status: ${response.status} ${response.statusText}`);
            
            if (response.ok) {
                const data = await response.json();
                const legacy = data.funk_mandela?.legacy_compatibility;
                
                if (legacy) {
                    console.log('   üìä TARGETS ENCONTRADOS:');
                    console.log(`      True Peak: ${legacy.true_peak_target} dBTP (esperado: -8)`);
                    console.log(`      Toler√¢ncia TP: ¬±${legacy.tol_true_peak} (esperado: 2.5)`);
                    console.log(`      DR: ${legacy.dr_target} (esperado: 8)`);
                    console.log(`      Toler√¢ncia DR: ¬±${legacy.tol_dr} (esperado: 1.5)`);
                    console.log(`      LRA: ${legacy.lra_target} (esperado: 9)`);
                    console.log(`      Toler√¢ncia LRA: ¬±${legacy.tol_lra} (esperado: 2)`);
                    console.log(`      Stereo: ${legacy.stereo_target} (esperado: 0.6)`);
                    console.log(`      Toler√¢ncia Stereo: ¬±${legacy.tol_stereo} (esperado: 0.15)`);
                    
                    // Verificar se s√£o os valores corretos
                    const valoresCorretos = 
                        legacy.true_peak_target === -8 &&
                        legacy.tol_true_peak === 2.5 &&
                        legacy.dr_target === 8 &&
                        legacy.tol_dr === 1.5 &&
                        legacy.lra_target === 9 &&
                        legacy.tol_lra === 2 &&
                        legacy.stereo_target === 0.6 &&
                        legacy.tol_stereo === 0.15;
                    
                    if (valoresCorretos) {
                        console.log('   ‚úÖ SUCESSO! Todos os valores est√£o corretos!');
                        console.log(`   üìÖ Vers√£o: ${data.funk_mandela?.version}`);
                        console.log(`   üïí Data: ${data.funk_mandela?.generated_at}`);
                        return true;
                    } else {
                        console.log('   ‚ùå Alguns valores ainda est√£o incorretos');
                    }
                } else {
                    console.log('   ‚ùå Se√ß√£o legacy_compatibility n√£o encontrada');
                }
            } else {
                const text = await response.text();
                console.log(`   üìÑ Resposta: ${text.substring(0, 100)}...`);
            }
        } catch (error) {
            console.log(`   üí• Erro: ${error.message}`);
        }
    }
    
    return false;
}

// Fun√ß√£o para testar o sistema de an√°lise
async function testarSistemaAnalise() {
    console.log('\nüß™ TESTANDO SISTEMA DE AN√ÅLISE...');
    
    // Verificar se a fun√ß√£o loadReferenceData est√° dispon√≠vel
    if (typeof window !== 'undefined' && window.loadReferenceData) {
        try {
            console.log('üîÑ Carregando refer√™ncias funk_mandela...');
            
            // Limpar cache primeiro
            if (window.__refDataCache) {
                delete window.__refDataCache['funk_mandela'];
            }
            window.REFS_BYPASS_CACHE = true;
            
            const refData = await window.loadReferenceData('funk_mandela');
            
            if (refData && refData.true_peak_target) {
                console.log('‚úÖ Sistema de an√°lise funcionando!');
                console.log(`   True Peak carregado: ${refData.true_peak_target} dBTP`);
                console.log(`   Status: ${refData.true_peak_target === -8 ? 'üéØ NOVOS VALORES' : '‚ö†Ô∏è VALORES ANTIGOS'}`);
                return refData.true_peak_target === -8;
            } else {
                console.log('‚ùå Falha ao carregar dados de refer√™ncia');
            }
        } catch (error) {
            console.log(`‚ùå Erro no sistema de an√°lise: ${error.message}`);
        }
    } else {
        console.log('‚ö†Ô∏è Fun√ß√£o loadReferenceData n√£o dispon√≠vel (execute no contexto da aplica√ß√£o)');
    }
    
    return false;
}

// Executar verifica√ß√µes
async function executarVerificacaoCompleta() {
    console.log('üöÄ Iniciando verifica√ß√£o completa...\n');
    
    const prodOk = await verificarTargetsProducao();
    const sistemaOk = await testarSistemaAnalise();
    
    console.log('\n' + '='.repeat(60));
    console.log('üìã RESULTADO FINAL:');
    console.log('='.repeat(60));
    
    if (prodOk && sistemaOk) {
        console.log('üéâ SUCESSO TOTAL! Novos targets funcionando em produ√ß√£o!');
        console.log('   ‚úÖ Arquivo JSON atualizado');
        console.log('   ‚úÖ Sistema de an√°lise funcionando');
        console.log('   ‚úÖ Cache limpo');
    } else if (prodOk) {
        console.log('üü° PARCIAL: JSON atualizado, mas sistema pode estar com cache');
        console.log('   üí° Dica: Atualize a p√°gina (F5) ou aguarde alguns minutos');
    } else {
        console.log('üî¥ PENDENTE: Aguarde o deploy completar (2-5 minutos)');
        console.log('   ‚è≥ Vercel ainda est√° propagando as mudan√ßas');
    }
    
    console.log('\nüí° Para usar no console do navegador:');
    console.log('   1. Abra o DevTools (F12)');
    console.log('   2. Cole este c√≥digo no console');
    console.log('   3. Execute a fun√ß√£o: executarVerificacaoCompleta()');
}

// Auto-executar se no contexto certo
if (typeof window !== 'undefined') {
    executarVerificacaoCompleta();
} else {
    console.log('üí° Execute este script no console do navegador para teste completo');
}
