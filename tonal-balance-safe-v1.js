/**
 * üõ°Ô∏è TONAL BALANCE SAFE V1
 * Sistema seguro para valida√ß√£o e exibi√ß√£o do bloco "Sub / Low / Mid / High"
 * 
 * üéØ OBJETIVO: Garantir que as bandas espectrais mostrem valores reais e distintos,
 * ocultando automaticamente o bloco quando dados forem insuficientes/duvidosos.
 * 
 * üö¶ FEATURE FLAG: TONAL_BALANCE_SAFE_V1
 */

// üö¶ ATIVA√á√ÉO AUTOM√ÅTICA da feature flag
window.TONAL_BALANCE_SAFE_V1 = true;

/**
 * üîç Configura√ß√£o do sistema de valida√ß√£o
 */
const TONAL_BALANCE_CONFIG = {
    // Toler√¢ncia para detectar valores "quase iguais" (em dB)
    UNIQUENESS_TOLERANCE: 0.5,
    
    // M√≠nimo de bandas v√°lidas para exibir o bloco
    MINIMUM_VALID_BANDS: 2,
    
    // Threshold para bandas v√°lidas (% de bandas que devem ter valores v√°lidos)
    VALID_BANDS_THRESHOLD: 0.6, // 60% das bandas devem ser v√°lidas
    
    // Valor m√≠nimo sensato para RMS (dB) - valores muito baixos s√£o suspeitos
    MIN_SENSIBLE_RMS_DB: -80,
    
    // Valor m√°ximo sensato para RMS (dB) - valores muito altos s√£o suspeitos  
    MAX_SENSIBLE_RMS_DB: 20,
    
    // Debug logs
    DEBUG: false
};

/**
 * üß™ Validar dados de bandas espectrais
 * @param {Object} tonalBalance - Objeto tonalBalance do resultado da an√°lise
 * @returns {Object} Resultado da valida√ß√£o com detalhes
 */
function validateSpectralBandsData(tonalBalance) {
    const startTime = performance.now();
    const result = {
        isValid: false,
        shouldDisplay: false,
        validBands: [],
        invalidBands: [],
        issues: [],
        stats: {
            totalBands: 0,
            validCount: 0,
            invalidCount: 0,
            uniqueValues: 0,
            validationTime: 0
        }
    };

    // üîç Valida√ß√£o b√°sica de entrada
    if (!tonalBalance || typeof tonalBalance !== 'object') {
        result.issues.push('tonalBalance_missing_or_invalid');
        if (TONAL_BALANCE_CONFIG.DEBUG) {
            console.log('üîç [TONAL-SAFE] Dados ausentes ou inv√°lidos:', tonalBalance);
        }
        result.stats.validationTime = performance.now() - startTime;
        return result;
    }

    // üéØ Mapear e validar bandas conhecidas
    const expectedBands = ['sub', 'low', 'mid', 'high'];
    const validValues = [];
    
    expectedBands.forEach(bandKey => {
        const band = tonalBalance[bandKey];
        result.stats.totalBands++;
        
        // Verificar se a banda existe e tem estrutura v√°lida
        if (!band || typeof band !== 'object' || !Number.isFinite(band.rms_db)) {
            result.invalidBands.push({
                key: bandKey,
                reason: 'missing_or_invalid_structure',
                data: band
            });
            result.stats.invalidCount++;
            return;
        }
        
        const rmsDb = band.rms_db;
        
        // Verificar se o valor est√° em uma faixa sensata
        if (rmsDb < TONAL_BALANCE_CONFIG.MIN_SENSIBLE_RMS_DB || 
            rmsDb > TONAL_BALANCE_CONFIG.MAX_SENSIBLE_RMS_DB ||
            rmsDb === -Infinity || rmsDb === Infinity) {
            result.invalidBands.push({
                key: bandKey,
                reason: 'value_out_of_range',
                value: rmsDb,
                data: band
            });
            result.stats.invalidCount++;
            return;
        }
        
        // Banda √© v√°lida
        result.validBands.push({
            key: bandKey,
            value: rmsDb,
            data: band
        });
        validValues.push(rmsDb);
        result.stats.validCount++;
    });

    // üî¢ Verificar unicidade dos valores (detectar repeti√ß√£o suspeita)
    const uniqueValues = new Set();
    validValues.forEach(value => {
        // Agrupar valores muito pr√≥ximos como "iguais"
        const roundedValue = Math.round(value / TONAL_BALANCE_CONFIG.UNIQUENESS_TOLERANCE) * TONAL_BALANCE_CONFIG.UNIQUENESS_TOLERANCE;
        uniqueValues.add(roundedValue);
    });
    
    result.stats.uniqueValues = uniqueValues.size;
    
    // üö© Detectar problemas de repeti√ß√£o
    if (validValues.length >= 2 && uniqueValues.size === 1) {
        result.issues.push('all_values_identical');
        if (TONAL_BALANCE_CONFIG.DEBUG) {
            console.log('üö® [TONAL-SAFE] Todos os valores s√£o id√™nticos:', validValues[0]);
        }
    } else if (validValues.length >= 3 && uniqueValues.size <= 1) {
        result.issues.push('insufficient_value_diversity');
        if (TONAL_BALANCE_CONFIG.DEBUG) {
            console.log('üö® [TONAL-SAFE] Diversidade insuficiente de valores:', Array.from(uniqueValues));
        }
    }

    // üéØ Determinar se deve exibir o bloco
    const hasEnoughValidBands = result.stats.validCount >= TONAL_BALANCE_CONFIG.MINIMUM_VALID_BANDS;
    const hasValidThreshold = (result.stats.validCount / result.stats.totalBands) >= TONAL_BALANCE_CONFIG.VALID_BANDS_THRESHOLD;
    const hasValueDiversity = result.stats.uniqueValues > 1 || result.stats.validCount === 1; // 1 banda √© OK
    
    result.isValid = hasEnoughValidBands && hasValidThreshold && hasValueDiversity;
    result.shouldDisplay = result.isValid && result.issues.length === 0;
    
    result.stats.validationTime = performance.now() - startTime;
    
    if (TONAL_BALANCE_CONFIG.DEBUG) {
        console.log('üß™ [TONAL-SAFE] Resultado valida√ß√£o:', {
            shouldDisplay: result.shouldDisplay,
            validCount: result.stats.validCount,
            uniqueValues: result.stats.uniqueValues,
            issues: result.issues,
            validationTime: `${result.stats.validationTime.toFixed(2)}ms`
        });
    }
    
    return result;
}

/**
 * üé® Vers√£o segura da fun√ß√£o tonalSummary
 * @param {Object} tonalBalance - Dados das bandas espectrais
 * @returns {string} HTML seguro ou "‚Äî" se dados insuficientes
 */
function tonalSummarySafe(tonalBalance) {
    // üö¶ Verificar se feature flag est√° ativa
    if (!window.TONAL_BALANCE_SAFE_V1) {
        // Fallback para vers√£o original se flag desativada
        if (window.tonalSummaryOriginal) {
            return window.tonalSummaryOriginal(tonalBalance);
        }
        // Fallback simples se fun√ß√£o original n√£o dispon√≠vel
        return tonalBalance ? 'Dados dispon√≠veis' : '‚Äî';
    }
    
    // üîç Validar dados usando sistema seguro
    const validation = validateSpectralBandsData(tonalBalance);
    
    if (!validation.shouldDisplay) {
        if (TONAL_BALANCE_CONFIG.DEBUG) {
            console.log('üö´ [TONAL-SAFE] Bloco ocultado. Motivos:', validation.issues);
        }
        return '‚Äî';
    }
    
    // üéØ Renderizar apenas bandas v√°lidas
    const parts = [];
    validation.validBands.forEach(band => {
        const label = {
            'sub': 'Sub',
            'low': 'Low', 
            'mid': 'Mid',
            'high': 'High'
        }[band.key] || band.key;
        
        parts.push(`${label} ${band.value.toFixed(1)}dB`);
    });
    
    return parts.length > 0 ? parts.join(' ‚Ä¢ ') : '‚Äî';
}

/**
 * üîÑ Sistema de migra√ß√£o autom√°tica
 * Substitui a fun√ß√£o tonalSummary original de forma segura
 */
function applyTonalBalanceSafeMigration() {
    // Verificar se a migra√ß√£o j√° foi aplicada
    if (window.tonalBalanceSafeMigrationApplied) {
        if (TONAL_BALANCE_CONFIG.DEBUG) {
            console.log('üîÑ [TONAL-SAFE] Migra√ß√£o j√° aplicada, pulando');
        }
        return;
    }
    
    try {
        // üîç Procurar e substituir fun√ß√µes tonalSummary existentes
        const possibleLocations = [
            'tonalSummary', // Global
            'window.tonalSummary' // Window object
        ];
        
        let migratedCount = 0;
        
        possibleLocations.forEach(location => {
            try {
                const parts = location.split('.');
                let obj = window;
                
                // Navegar at√© o objeto pai
                for (let i = 0; i < parts.length - 1; i++) {
                    if (obj[parts[i]]) {
                        obj = obj[parts[i]];
                    } else {
                        return; // Caminho n√£o existe
                    }
                }
                
                const funcName = parts[parts.length - 1];
                
                if (typeof obj[funcName] === 'function') {
                    // Salvar fun√ß√£o original antes de substituir
                    if (!window.tonalSummaryOriginal) {
                        window.tonalSummaryOriginal = obj[funcName];
                    }
                    
                    // Substituir pela vers√£o segura
                    obj[funcName] = tonalSummarySafe;
                    migratedCount++;
                    
                    if (TONAL_BALANCE_CONFIG.DEBUG) {
                        console.log(`‚úÖ [TONAL-SAFE] Migrada fun√ß√£o: ${location}`);
                    }
                }
            } catch (error) {
                if (TONAL_BALANCE_CONFIG.DEBUG) {
                    console.warn(`‚ö†Ô∏è [TONAL-SAFE] Erro migrando ${location}:`, error);
                }
            }
        });
        
        // Marcar migra√ß√£o como aplicada
        window.tonalBalanceSafeMigrationApplied = true;
        
        if (TONAL_BALANCE_CONFIG.DEBUG) {
            console.log(`üéØ [TONAL-SAFE] Migra√ß√£o completa. ${migratedCount} fun√ß√£o(√µes) migrada(s)`);
        }
        
    } catch (error) {
        console.error('üö® [TONAL-SAFE] Erro na migra√ß√£o autom√°tica:', error);
    }
}

/**
 * üß™ Fun√ß√£o de teste para validar o sistema
 */
function testTonalBalanceSafe() {
    console.group('üß™ TESTE TONAL BALANCE SAFE V1');
    
    // Casos de teste
    const testCases = [
        {
            name: 'Dados v√°lidos e distintos',
            data: {
                sub: { rms_db: -15.2 },
                low: { rms_db: -8.7 },
                mid: { rms_db: -6.8 },
                high: { rms_db: -11.2 }
            },
            esperado: 'exibir'
        },
        {
            name: 'Todos valores iguais (suspeito)',
            data: {
                sub: { rms_db: -14.0 },
                low: { rms_db: -14.0 },
                mid: { rms_db: -14.0 },
                high: { rms_db: -14.0 }
            },
            esperado: 'ocultar'
        },
        {
            name: 'Dados parciais v√°lidos',
            data: {
                sub: { rms_db: -15.2 },
                low: { rms_db: -8.7 },
                mid: null,
                high: { rms_db: -11.2 }
            },
            esperado: 'exibir'
        },
        {
            name: 'Dados insuficientes',
            data: {
                sub: { rms_db: -15.2 },
                low: null,
                mid: null,
                high: null
            },
            esperado: 'ocultar'
        },
        {
            name: 'Dados completamente ausentes',
            data: null,
            esperado: 'ocultar'
        }
    ];
    
    let passedTests = 0;
    
    testCases.forEach((testCase, index) => {
        console.log(`\nüîç Teste ${index + 1}: ${testCase.name}`);
        
        const validation = validateSpectralBandsData(testCase.data);
        const result = tonalSummarySafe(testCase.data);
        
        const shouldDisplay = testCase.esperado === 'exibir';
        const actuallyDisplays = result !== '‚Äî';
        
        const passed = shouldDisplay === actuallyDisplays;
        
        if (passed) {
            passedTests++;
            console.log(`‚úÖ PASSOU: ${result}`);
        } else {
            console.log(`‚ùå FALHOU: Esperado ${testCase.esperado}, obteve: ${result}`);
        }
        
        console.log(`   Stats: ${validation.stats.validCount}/${validation.stats.totalBands} v√°lidas, ${validation.stats.uniqueValues} √∫nicas`);
    });
    
    console.log(`\nüéØ RESULTADO: ${passedTests}/${testCases.length} testes passaram`);
    console.groupEnd();
    
    return passedTests === testCases.length;
}

/**
 * üöÄ Inicializa√ß√£o autom√°tica
 */
function initializeTonalBalanceSafe() {
    if (!window.TONAL_BALANCE_SAFE_V1) {
        if (TONAL_BALANCE_CONFIG.DEBUG) {
            console.log('üö´ [TONAL-SAFE] Feature flag desativada, sistema n√£o inicializado');
        }
        return;
    }
    
    console.log('üõ°Ô∏è [TONAL-SAFE] Inicializando sistema seguro para bandas espectrais...');
    
    // Aplicar migra√ß√£o autom√°tica
    applyTonalBalanceSafeMigration();
    
    // Expor fun√ß√µes para uso externo
    window.validateSpectralBandsData = validateSpectralBandsData;
    window.tonalSummarySafe = tonalSummarySafe;
    window.testTonalBalanceSafe = testTonalBalanceSafe;
    
    console.log('‚úÖ [TONAL-SAFE] Sistema inicializado com sucesso!');
    console.log('üí° Execute no console: testTonalBalanceSafe()');
}

// üéØ Auto-inicializa√ß√£o quando o script carregar
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeTonalBalanceSafe);
} else {
    // DOM j√° carregado
    initializeTonalBalanceSafe();
}

// üîÑ Tamb√©m tentar inicializar ap√≥s um delay para garantir que outras depend√™ncias carregaram
setTimeout(initializeTonalBalanceSafe, 1000);
