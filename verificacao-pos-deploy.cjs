#!/usr/bin/env node
/**
 * üîç VERIFICA√á√ÉO P√ìS-DEPLOY - DIAGN√ìSTICO R√ÅPIDO
 * 
 * Verifica se o deploy foi bem-sucedido e o sistema est√° funcional
 */

console.log('üîç VERIFICA√á√ÉO P√ìS-DEPLOY - DIAGN√ìSTICO R√ÅPIDO');
console.log('=' .repeat(60));

// ‚úÖ 1. VERIFICAR CORRE√á√ÉO DO ERRO v2Metrics
console.log('\n1Ô∏è‚É£ VERIFICANDO CORRE√á√ÉO DO ERRO v2Metrics:');
const fs = require('fs');

try {
    const audioAnalyzerPath = 'c:/Users/DJ Correa/Desktop/Programa√ß√£o/ai-synth/public/audio-analyzer.js';
    const content = fs.readFileSync(audioAnalyzerPath, 'utf8');
    
    // Verificar se a defini√ß√£o foi adicionada
    const hasV2MetricsDefinition = content.includes('const v2Metrics = null; // placeholder para compatibilidade futura');
    const hasCorrectCalls = content.includes('applyLogicAlignmentCorrections(baseAnalysis, td, unifiedData, v2Metrics)');
    
    if (hasV2MetricsDefinition && hasCorrectCalls) {
        console.log('‚úÖ v2Metrics definido corretamente');
        console.log('‚úÖ Chamadas de fun√ß√£o corrigidas');
    } else {
        console.log('‚ùå Corre√ß√µes v2Metrics n√£o encontradas');
        console.log(`   Definition found: ${hasV2MetricsDefinition}`);
        console.log(`   Calls corrected: ${hasCorrectCalls}`);
    }
} catch (error) {
    console.log(`‚ùå Erro ao verificar corre√ß√µes: ${error.message}`);
}

// ‚úÖ 2. VERIFICAR STATUS DO SERVIDOR
console.log('\n2Ô∏è‚É£ VERIFICANDO STATUS DO SERVIDOR:');
try {
    const http = require('http');
    
    const options = {
        hostname: 'localhost',
        port: 3000,
        path: '/',
        method: 'GET',
        timeout: 5000
    };
    
    const req = http.request(options, (res) => {
        console.log(`‚úÖ Servidor respondendo: HTTP ${res.statusCode}`);
        if (res.statusCode === 200) {
            console.log('‚úÖ Sistema acess√≠vel em http://localhost:3000');
        }
    });
    
    req.on('error', (err) => {
        console.log(`‚ùå Servidor n√£o acess√≠vel: ${err.message}`);
        console.log('üí° Execute: python -m http.server 3000');
    });
    
    req.on('timeout', () => {
        console.log('‚è±Ô∏è Timeout na verifica√ß√£o do servidor');
        req.destroy();
    });
    
    req.end();
    
} catch (error) {
    console.log(`‚ùå Erro na verifica√ß√£o do servidor: ${error.message}`);
}

// ‚úÖ 3. VERIFICAR CONFIGURA√á√ïES ESPECTRAIS
console.log('\n3Ô∏è‚É£ VERIFICANDO CONFIGURA√á√ïES ESPECTRAIS:');
try {
    const configPaths = [
        'c:/Users/DJ Correa/Desktop/Programa√ß√£o/ai-synth/refs/out/funk_mandela.json',
        'c:/Users/DJ Correa/Desktop/Programa√ß√£o/ai-synth/public/refs/out/funk_mandela.json'
    ];
    
    configPaths.forEach((path, index) => {
        try {
            const config = JSON.parse(fs.readFileSync(path, 'utf8'));
            const spectralBalance = config.funk_mandela?.spectralBalance;
            
            if (spectralBalance && spectralBalance.bands) {
                const bandCount = Object.keys(spectralBalance.bands).length;
                console.log(`‚úÖ ${index === 0 ? 'DEV' : 'PROD'}: ${bandCount} bandas espectrais configuradas`);
                
                // Verificar soma das porcentagens
                const totalPercent = Object.values(spectralBalance.bands)
                    .reduce((sum, band) => sum + (band.target_energy_percent || 0), 0);
                
                if (Math.abs(totalPercent - 100) < 1.0) {
                    console.log(`   ‚úÖ Total de energia: ${totalPercent.toFixed(1)}%`);
                } else {
                    console.log(`   ‚ö†Ô∏è  Total de energia: ${totalPercent.toFixed(1)}% (deveria ser ~100%)`);
                }
            } else {
                console.log(`‚ùå ${index === 0 ? 'DEV' : 'PROD'}: spectralBalance n√£o encontrado`);
            }
        } catch (err) {
            console.log(`‚ùå ${index === 0 ? 'DEV' : 'PROD'}: erro ao ler configura√ß√£o - ${err.message}`);
        }
    });
} catch (error) {
    console.log(`‚ùå Erro na verifica√ß√£o de configura√ß√µes: ${error.message}`);
}

// ‚úÖ 4. VERIFICAR FEATURE FLAGS
console.log('\n4Ô∏è‚É£ VERIFICANDO FEATURE FLAGS NO SISTEMA:');
try {
    const integrationPath = 'c:/Users/DJ Correa/Desktop/Programa√ß√£o/ai-synth/public/audio-analyzer-integration.js';
    const integrationContent = fs.readFileSync(integrationPath, 'utf8');
    
    const featureChecks = [
        { name: 'SPECTRAL_INTERNAL_MODE', pattern: 'SPECTRAL_INTERNAL_MODE' },
        { name: 'URL Parameter Support', pattern: 'params.has(\'spectral\')' },
        { name: 'SpectralBalanceAnalyzer', pattern: 'class SpectralBalanceAnalyzer' },
        { name: 'Feature Flag Processing', pattern: 'window.SPECTRAL_INTERNAL_MODE' }
    ];
    
    featureChecks.forEach(check => {
        if (integrationContent.includes(check.pattern)) {
            console.log(`‚úÖ ${check.name}: implementado`);
        } else {
            console.log(`‚ùå ${check.name}: n√£o encontrado`);
        }
    });
    
} catch (error) {
    console.log(`‚ùå Erro na verifica√ß√£o de feature flags: ${error.message}`);
}

// ‚úÖ 5. INSTRU√á√ïES PARA TESTE
console.log('\n5Ô∏è‚É£ INSTRU√á√ïES PARA TESTE:');
console.log('üåê Para testar o sistema:');
console.log('   1. Abra: http://localhost:3000');
console.log('   2. Modo porcentagem: http://localhost:3000?spectral=percent');
console.log('   3. Debug ativo: http://localhost:3000?spectral=percent&spectralLog=true');
console.log('   4. Fa√ßa upload de um arquivo de √°udio');
console.log('   5. Verifique o console do browser para logs espectrais');

console.log('\nüîß Comandos √∫teis no console do browser:');
console.log('   ‚Ä¢ window.SPECTRAL_INTERNAL_MODE - verificar modo atual');
console.log('   ‚Ä¢ window.SPECTRAL_INTERNAL_MODE = "legacy" - rollback');
console.log('   ‚Ä¢ window.SPECTRAL_INTERNAL_MODE = "percent" - ativar novo sistema');

console.log('\n' + '=' .repeat(60));
console.log('‚ú® VERIFICA√á√ÉO CONCLU√çDA - SISTEMA PRONTO PARA TESTE');
console.log('=' .repeat(60));
